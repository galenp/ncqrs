<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\Development\Libs\ncqrs\lib\release\Ncqrs.Tests\Ncqrs.Tests.dll" total="239" errors="0" failures="0" not-run="10" inconclusive="0" ignored="10" skipped="0" invalid="0" date="2014-10-05" time="11:40:57">
  <environment nunit-version="2.5.9.10348" clr-version="2.0.50727.5485" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="D:\Development\Libs\ncqrs" machine-name="FIREFLY" user="Galen" user-domain="FIREFLY" />
  <culture-info current-culture="en-AU" current-uiculture="en-US" />
  <test-suite type="Assembly" name="D:\Development\Libs\ncqrs\lib\release\Ncqrs.Tests\Ncqrs.Tests.dll" executed="True" result="Success" success="True" time="6.123" asserts="0">
    <results>
      <test-suite type="Namespace" name="Ncqrs" executed="True" result="Success" success="True" time="6.096" asserts="0">
        <results>
          <test-suite type="Namespace" name="Eventing" executed="True" result="Success" success="True" time="0.604" asserts="0">
            <results>
              <test-suite type="Namespace" name="Storage" executed="True" result="Success" success="True" time="0.602" asserts="0">
                <results>
                  <test-suite type="Namespace" name="NoDB" executed="True" result="Success" success="True" time="0.601" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.599" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="EventStoreTests" executed="True" result="Success" success="True" time="0.487" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="when_getting_all_events_for_an_event_source" executed="True" result="Success" success="True" time="0.454" asserts="0">
                                <categories>
                                  <category name="Integration" />
                                </categories>
                                <results>
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_getting_all_events_for_an_event_source.it_should_get_the_exact_same_events_that_were_committed" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_getting_all_events_for_an_event_source.it_should_return_an_empty_result_for_a_non_existant_event_source" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="when_getting_the_events_since_a_specific_version" executed="True" result="Success" success="True" time="0.009" asserts="0">
                                <categories>
                                  <category name="Integration" />
                                </categories>
                                <results>
                                  <test-suite type="ParameterizedTest" name="it_should_return_the_events_since_version" executed="True" result="Success" success="True" time="0.005" asserts="0">
                                    <results>
                                      <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_getting_the_events_since_a_specific_version.it_should_return_the_events_since_version(2)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                      <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_getting_the_events_since_a_specific_version.it_should_return_the_events_since_version(1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                      <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_getting_the_events_since_a_specific_version.it_should_return_the_events_since_version(0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                                      <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_getting_the_events_since_a_specific_version.it_should_return_the_events_since_version(3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="when_saving_a_new_event_source" executed="False" result="Ignored">
                                <categories>
                                  <category name="Integration" />
                                </categories>
                                <reason>
                                  <message><![CDATA[File system race. Also, NoDBEventStore serialization is incompatible with StoredEventExtensions. See issue #54 for full explanation.]]></message>
                                </reason>
                                <results>
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_saving_a_new_event_source.it_should_create_a_new_event_history_file" executed="False" result="Ignored">
                                    <reason>
                                      <message><![CDATA[File system race. Also, NoDBEventStore serialization is incompatible with StoredEventExtensions. See issue #54 for full explanation.]]></message>
                                    </reason>
                                  </test-case>
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_saving_a_new_event_source.it_should_have_at_least_one_event" executed="False" result="Ignored">
                                    <reason>
                                      <message><![CDATA[File system race. Also, NoDBEventStore serialization is incompatible with StoredEventExtensions. See issue #54 for full explanation.]]></message>
                                    </reason>
                                  </test-case>
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_saving_a_new_event_source.it_should_serialize_the_uncommitted_events_to_the_file" executed="False" result="Ignored">
                                    <reason>
                                      <message><![CDATA[File system race. Also, NoDBEventStore serialization is incompatible with StoredEventExtensions. See issue #54 for full explanation.]]></message>
                                    </reason>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="when_saving_events_based_on_stale_state" executed="True" result="Success" success="True" time="0.015" asserts="0">
                                <categories>
                                  <category name="Integration" />
                                </categories>
                                <results>
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.EventStoreTests.when_saving_events_based_on_stale_state.it_should_throw_a_concurrency_exception" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="SnapshotStoreTests" executed="True" result="Success" success="True" time="0.109" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="when_getting_the_snapshot" executed="True" result="Success" success="True" time="0.101" asserts="0">
                                <results>
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.SnapshotStoreTests.when_getting_the_snapshot.it_should_get_the_last_snapshot_saved" executed="True" result="Success" success="True" time="0.039" asserts="0" />
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.SnapshotStoreTests.when_getting_the_snapshot.it_should_return_null_if_the_snapshot_does_not_exist" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="when_saving_a_new_snapshot" executed="True" result="Success" success="True" time="0.008" asserts="0">
                                <results>
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.SnapshotStoreTests.when_saving_a_new_snapshot.it_should_create_the_snapshot_file" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Ncqrs.Eventing.Storage.NoDB.Tests.SnapshotStoreTests.when_saving_a_new_snapshot.it_should_write_the_snapshot_to_the_snapshot_file" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="5.487" asserts="0">
            <results>
              <test-suite type="TestFixture" name="BasicGuidGeneratorSpecs" executed="True" result="Success" success="True" time="0.024" asserts="0">
                <results>
                  <test-case name="Ncqrs.Tests.BasicGuidGeneratorSpecs.When_getting_a_new_identifier_it_should_not_be_empty" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="Ncqrs.Tests.BasicGuidGeneratorSpecs.When_getting_a_new_identifier_multiple_times_they_should_all_be_unique" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                  <test-case name="Ncqrs.Tests.BasicGuidGeneratorSpecs.When_getting_a_new_identifier_twice_they_should_not_be_the_same" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Commanding" executed="True" result="Success" success="True" time="1.789" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CommandBasedTests" executed="True" result="Success" success="True" time="0.299" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Commanding.CommandBasedTests.Constructing_with_a_direct_id_should_set_the_given_value" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Commanding.CommandBasedTests.Constructing_with_custom_generator_should_it_to_generate_id" executed="True" result="Success" success="True" time="0.238" asserts="0" />
                      <test-case name="Ncqrs.Tests.Commanding.CommandBasedTests.Constructing_without_any_parameters_should_use_IUniqueIdentifierGenerator_to_generate_id" executed="True" result="Success" success="True" time="0.052" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="CommandExecution" executed="True" result="Success" success="True" time="1.381" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CommandExecutorWrapperTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Commanding.CommandExecution.CommandExecutorWrapperTests.Constructing_it_with_a_null_action_should_throw" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                          <test-case name="Ncqrs.Tests.Commanding.CommandExecution.CommandExecutorWrapperTests.Executig_it_should_redirect_call_to_initialized_action" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="Ncqrs.Tests.Commanding.CommandExecution.CommandExecutorWrapperTests.Executig_it_should_redirect_the_given_command_to_initialized_action" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Mapping" executed="True" result="Success" success="True" time="1.347" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Attributes" executed="True" result="Success" success="True" time="1.152" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="AggregateRootIdAttributeTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AggregateRootIdAttributeTests.It_should_be_a_subclass_of_ExcludeInMappingAttribute" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="AttributeBasedCommandMapperTests" executed="True" result="Success" success="True" time="0.940" asserts="0">
                                <results>
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeBasedCommandMapperTests.Creating_executor_with_runtime_determed_type_should_create_working_executor" executed="True" result="Success" success="True" time="0.934" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeBasedCommandMapperTests.IsCommandMapped_should_return_false_for_correct_command_types_but_that_does__not_have_the_required_attribute" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeBasedCommandMapperTests.IsCommandMapped_should_return_false_for_non_command_types" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeBasedCommandMapperTests.IsCommandMapped_should_return_false_for_non_command_types_that_do_have_the_required_attribute" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeBasedCommandMapperTests.IsCommandMapped_should_return_true_for_correct_command_types_with_correct_attribute" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="AttributeCommandMappingTests" executed="True" result="Success" success="True" time="0.209" asserts="0">
                                <results>
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_decorated_with_Transactional_attribute_mapped_to_constructor_should_be_executed_in_context_of_transaction" executed="True" result="Success" success="True" time="0.095" asserts="1" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_decorated_with_Transactional_attribute_mapped_to_method_should_be_executed_in_context_of_transaction" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_decorated_with_Transactional_attribute_mapped_to_methodOrCreator_should_be_create_and_be_executed_in_context_of_transaction" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_decorated_with_Transactional_attribute_mapped_to_methodOrCreator_should_be_executed_in_context_of_transaction" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_create_and_update_the_title_of_the_aggregate_root" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_create_new_aggregate_root" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_create_new_complex_aggregate_root_using_implicit_parameter_mappings" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_create_new_complex_aggregate_root_using_mixed_parameter_mappings" executed="True" result="Success" success="True" time="0.008" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_create_new_complex_aggregate_root_using_name_parameter_mappings" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_create_new_complex_aggregate_root_using_ordinal_parameter_mappings" executed="True" result="Success" success="True" time="0.009" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_throw_an_exception_when_the_command_is_not_mapped" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_update_the_title_of_the_aggregate_root" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Attributes.AttributeCommandMappingTests.Command_should_update_the_title_of_the_existing_aggregate_root" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Fluent" executed="True" result="Success" success="True" time="0.173" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="FluentCommandMappingTests" executed="True" result="Success" success="True" time="0.173" asserts="0">
                                <results>
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Fluent.FluentCommandMappingTests.Command_should_create_and_then_use_existing" executed="True" result="Success" success="True" time="0.101" asserts="1" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Fluent.FluentCommandMappingTests.Command_should_create_new_aggregate_root" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Fluent.FluentCommandMappingTests.Command_should_create_new_aggregate_root_with_static_method" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Fluent.FluentCommandMappingTests.Command_should_throw_an_exception_when_the_command_is_not_mapped" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                                  <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.Fluent.FluentCommandMappingTests.Command_should_update_the_title_of_the_aggregate_root" executed="True" result="Success" success="True" time="0.023" asserts="0" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="MappingForCommandNotFoundExceptionTests" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.MappingForCommandNotFoundExceptionTests.Constructing_an_instance_should_initialize_the_command" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.MappingForCommandNotFoundExceptionTests.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.MappingForCommandNotFoundExceptionTests.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Commanding.CommandExecution.Mapping.MappingForCommandNotFoundExceptionTests.It_should_be_serializable" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TransactionalCommandExecutorWrapperTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Commanding.CommandExecution.TransactionalCommandExecutorWrapperTests.When_executing_it_it_should_call_the_executor_given_via_ctor" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CommandExecutorBaseTests" executed="True" result="Success" success="True" time="0.037" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Commanding.CommandExecutorBaseTests.Executing_one_with_a_custom_factory_should_give_context_created_with_that_factory" executed="True" result="Success" success="True" time="0.028" asserts="0" />
                      <test-case name="Ncqrs.Tests.Commanding.CommandExecutorBaseTests.Executing_should_call_ExecuteInContext_with_context_from_factory" executed="True" result="Success" success="True" time="0.008" asserts="0" />
                      <test-case name="Ncqrs.Tests.Commanding.CommandExecutorBaseTests.Executing_should_call_ExecuteInContext_with_given_command" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExecutorForCommandNotFoundExceptionTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Commanding.ExecutorForCommandNotFoundExceptionTests.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="Ncqrs.Tests.Commanding.ExecutorForCommandNotFoundExceptionTests.Constructing_an_instance_should_initialize_the_instance_type" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="Ncqrs.Tests.Commanding.ExecutorForCommandNotFoundExceptionTests.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Commanding.ExecutorForCommandNotFoundExceptionTests.It_should_be_serializable" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ServiceModel" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CommandServiceBaseTests" executed="True" result="Success" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Commanding.ServiceModel.CommandServiceBaseTests.All_interceptors_should_be_called_after_execution" executed="True" result="Success" success="True" time="0.039" asserts="0" />
                          <test-case name="Ncqrs.Tests.Commanding.ServiceModel.CommandServiceBaseTests.All_interceptors_should_be_called_before_execution" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="Ncqrs.Tests.Commanding.ServiceModel.CommandServiceBaseTests.Executing_command_should_executure_correct_handler_with_it" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                          <test-case name="Ncqrs.Tests.Commanding.ServiceModel.CommandServiceBaseTests.Executing_command_with_no_handler_should_cause_exception" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TransactionalCommandExecutorWrapperTests" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Commanding.TransactionalCommandExecutorWrapperTests.Executing_a_command_with_it_should_call_the_executor_that_was_set_at_construct" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Config" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="InstanceNotFoundInEnvironmentConfigurationExceptionTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Config.InstanceNotFoundInEnvironmentConfigurationExceptionTests.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="Ncqrs.Tests.Config.InstanceNotFoundInEnvironmentConfigurationExceptionTests.Constructing_an_instance_should_initialize_the_instance_type" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="Ncqrs.Tests.Config.InstanceNotFoundInEnvironmentConfigurationExceptionTests.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Config.InstanceNotFoundInEnvironmentConfigurationExceptionTests.It_should_be_serializable" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DateTimeBasedClockSpecs" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="Ncqrs.Tests.DateTimeBasedClockSpecs.When_getting_the_current_time_it_should_be_a_utc_kind" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.DateTimeBasedClockSpecs.When_getting_the_current_time_it_should_be_the_same_as_the_result_from_the_DateTime_class" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Domain" executed="True" result="Success" success="True" time="0.549" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AggregateRootMappedByConventionTests" executed="True" result="Success" success="True" time="0.139" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByConventionTests.Initializing_one_should_set_the_mapping_strategy_to_convention_based" executed="True" result="Success" success="True" time="0.030" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByConventionTests.Method_with_a_wrong_method_name_should_not_be_mapped" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByConventionTests.Methods_marked_as_no_event_handler_should_not_be_mapped" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByConventionTests.Private_event_handlers_should_be_mapped" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByConventionTests.Protected_event_handlers_should_be_mapped" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByConventionTests.Public_event_handlers_should_be_mapped" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AggregateRootMappedByExpressionTests" executed="True" result="Success" success="True" time="0.088" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByExpressionTests.Initializing_one_should_set_the_mapping_strategy_to_convention_based" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByExpressionTests.Methods_marked_as_no_event_handler_should_not_be_mapped" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByExpressionTests.Private_event_handlers_should_be_mapped" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByExpressionTests.Protected_event_handlers_should_be_mapped" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedByExpressionTests.Public_event_handlers_should_be_mapped" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AggregateRootMappedWithAttributesTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootMappedWithAttributesTests.Initializing_one_should_set_the_mapping_strategy_to_attributed_based" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AggregateRootTests" executed="True" result="Success" success="True" time="0.152" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Accepting_the_changes_should_set_the_initial_version_to_the_new_version" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Applying_an_event_should_affect_the_version" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Applying_an_event_should_at_it_to_the_uncommited_events" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Applying_an_event_should_call_the_event_handler_only_once" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Applying_an_event_should_not_effect_the_initial_version" executed="True" result="Success" success="True" time="0.009" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Applying_an_event_to_an_agg_root_with_history_should_call_the_event_handler_only_once" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Applying_an_event_when_there_is_no_unit_of_work_should_not_cause_an_exception" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Applying_an_event_with_no_handler_should_cause_an_exception" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Constructing_it_with_an_id_should_set_that_to_EventSourceId_property" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Initializing_from_history_should_not_throw_an_exception_when_the_history_was_empty" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Initializing_from_history_should_throw_an_exception_when_the_history_was_null" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Initiazling_from_history_with_correct_sequence_should_not_throw_exception" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Initiazling_from_wrong_history_with_wrong_sequence_should_throw_exception" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.It_could_not_be_loaded_from_history_when_it_already_contains_uncommitted_events" executed="True" result="Success" success="True" time="0.008" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.It_should_initialize_with_a_new_id_given_by_the_generator_from_the_environment" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.It_should_initialize_with_no_uncommited_events" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.It_should_initialize_with_version_0" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Loading_it_from_history_should_apply_all_events" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.AggregateRootTests.Should_be_able_to_register_RegisterThreadStaticEventAppliedCallbacks_from_parallel_threads" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EntityTests" executed="True" result="Success" success="True" time="0.051" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.EntityTests.Creating_an_entity_should_generate_event" executed="True" result="Success" success="True" time="0.029" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.EntityTests.Entity_event_handlers_should_be_called_only_if_event_is_sourced_from_this_entty" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EventNotHandledExceptionTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.EventNotHandledExceptionTests.Constructing_an_instance_should_initialize_the_event" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.EventNotHandledExceptionTests.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.EventNotHandledExceptionTests.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.EventNotHandledExceptionTests.It_should_be_serializable" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoUnitOfWorkAvailableInThisContextExceptionTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.NoUnitOfWorkAvailableInThisContextExceptionTests.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.NoUnitOfWorkAvailableInThisContextExceptionTests.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.NoUnitOfWorkAvailableInThisContextExceptionTests.It_should_be_serializable" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Storage" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AggregateRootCreationExceptionTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Domain.Storage.AggregateRootCreationExceptionTests.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Ncqrs.Tests.Domain.Storage.AggregateRootCreationExceptionTests.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Ncqrs.Tests.Domain.Storage.AggregateRootCreationExceptionTests.It_should_be_serializable" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SimpleAggregateRootCreationStrategyTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Domain.Storage.SimpleAggregateRootCreationStrategyTests.Creating_instance_should_succeed_when_type_is_subclass_of_AggregateRoot_and_has_default_ctor" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Domain.Storage.SimpleAggregateRootCreationStrategyTests.Creating_non_aggregate_root_type_should_throw" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Domain.Storage.SimpleAggregateRootCreationStrategyTests.Creating_without_default_ctor_should_throw" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Domain.Storage.SimpleAggregateRootCreationStrategyTests.Creation_result_by_correct_type_should_be_of_specified_type" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Domain.Storage.SimpleAggregateRootCreationStrategyTests.Creation_result_by_correct_type_should_not_be_null" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeThresholdedActionBasedInternalEventHandlerSpecs" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.TypeThresholdedActionBasedInternalEventHandlerSpecs.Threshold_should_hold_event_when_it_is_of_a_higher_type_when_exact_is_true" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.TypeThresholdedActionBasedInternalEventHandlerSpecs.Threshold_should_hold_event_when_it_is_of_a_lower_type_when_exact_is_false" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.TypeThresholdedActionBasedInternalEventHandlerSpecs.Threshold_should_hold_event_when_it_is_of_a_lower_type_when_exact_is_true" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.TypeThresholdedActionBasedInternalEventHandlerSpecs.Threshold_should_hold_event_when_it_is_of_the_same_type_when_exact_is_true" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="Ncqrs.Tests.Domain.TypeThresholdedActionBasedInternalEventHandlerSpecs.Threshold_should_not_hold_event_when_it_is_of_a_higher_type_when_exact_is_false" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnitOfWorkTests" executed="True" result="Success" success="True" time="0.052" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Domain.UnitOfWorkTests.Accepting_unit_of_work_stores_and_publishes_the_events" executed="True" result="Success" success="True" time="0.052" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Eventing" executed="True" result="Success" success="True" time="1.689" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CommittedEventStreamTests" executed="True" result="Success" success="True" time="0.023" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Eventing.CommittedEventStreamTests.Init_should_set_From_and_To_version_information" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.CommittedEventStreamTests.Init_with_source_id_an_null_stream_should_set_source_id_and_have_no_events" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.CommittedEventStreamTests.Init_with_source_id_and_stream_should_set_source_id_and_contain_all_events_as_given" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.CommittedEventStreamTests.Init_with_source_id_only_should_set_source_id_and_have_no_events" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.CommittedEventStreamTests.When_constructing_it_with_events_but_an_element_is_null_it_should_throw_ArgumentNullException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.CommittedEventStreamTests.When_constructing_it_with_events_where_one_has_an_incorrect_event_source_id_it_should_throw_argument_exception" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.CommittedEventStreamTests.When_constructing_it_with_events_where_one_has_an_incorrect_sequence_it_should_throw_argument_exception" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EventBaseSpecs" executed="True" result="Success" success="True" time="0.040" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Eventing.EventBaseSpecs.Constructing_a_new_event_base_it_should_call_the_GenerateNewId_method_from_the_generator_that_has_been_set_in_the_environment" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.EventBaseSpecs.Constructing_a_new_event_base_it_should_set_the_event_identifier_to_identifier_that_has_been_given_from_the_IUniqueIdentifierGenerator_from_the_NcqrsEnvironment" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                      <test-case name="Ncqrs.Tests.Eventing.EventBaseSpecs.Constructing_a_new_event_base_it_should_set_the_event_time_stap_to_the_time_given_by_the_IClock_from_the_NcqrsEnvironment" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ServiceModel" executed="True" result="Success" success="True" time="0.247" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Bus" executed="True" result="Success" success="True" time="0.245" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="InProcessEventBusSpecs" executed="True" result="Success" success="True" time="0.244" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.ServiceModel.Bus.InProcessEventBusSpecs.Registering_handler_via_generic_overload_should_also_add_the_handler" executed="True" result="Success" success="True" time="0.052" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.ServiceModel.Bus.InProcessEventBusSpecs.When_a_catch_all_handler_is_register_it_should_be_called_for_all_events" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.ServiceModel.Bus.InProcessEventBusSpecs.When_a_handler_is_registered_for_a_specific_type_it_should_not_receive_other_events" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.ServiceModel.Bus.InProcessEventBusSpecs.When_a_multiple_catch_all_handler_are_registered_for_they_should_all_been_called" executed="True" result="Success" success="True" time="0.052" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.ServiceModel.Bus.InProcessEventBusSpecs.When_a_multiple_specific_handlers_are_register_they_all_should_be_called_when_the_specific_event_is_published" executed="True" result="Success" success="True" time="0.024" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.ServiceModel.Bus.InProcessEventBusSpecs.When_multiple_messages_are_published_and_a_specific_handler_is_register_oply_the_matching_events_should_be_received_at_the_handler" executed="True" result="Success" success="True" time="0.034" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.ServiceModel.Bus.InProcessEventBusSpecs.When_multiple_messages_are_published_at_once_they_all_should_be_published" executed="True" result="Success" success="True" time="0.043" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Sourcing" executed="True" result="Success" success="True" time="0.072" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Mapping" executed="True" result="Success" success="True" time="0.071" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AttributeBasedDomainEventHandlerMappingStrategyTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.AttributeBasedDomainEventHandlerMappingStrategyTests.It_should_create_the_correct_event_handlers" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.AttributeBasedDomainEventHandlerMappingStrategyTests.It_should_map_the_mapped_events" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.AttributeBasedDomainEventHandlerMappingStrategyTests.It_should_throw_an_exception_when_mapped_method_does_have_more_then_one_parameter" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.AttributeBasedDomainEventHandlerMappingStrategyTests.It_should_throw_an_exception_when_mapped_method_does_not_have_a_parameter" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.AttributeBasedDomainEventHandlerMappingStrategyTests.It_should_throw_an_exception_when_mapped_method_is_static" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ConventionBasedDomainEventHandlerMappingStrategyTests" executed="True" result="Success" success="True" time="0.040" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ConventionBasedDomainEventHandlerMappingStrategyTests.It_should_create_the_correct_event_handlers" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ConventionBasedDomainEventHandlerMappingStrategyTests.It_should_map_the_mapped_events" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ConventionBasedDomainEventHandlerMappingStrategyTests.It_should_skip_when_mapped_method_does_have_more_then_one_parameter" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ConventionBasedDomainEventHandlerMappingStrategyTests.It_should_skip_when_mapped_method_does_not_have_a_EventBaseType_as_parameter" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ConventionBasedDomainEventHandlerMappingStrategyTests.It_should_skip_when_mapped_method_does_not_have_a_parameter" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ConventionBasedDomainEventHandlerMappingStrategyTests.It_should_skip_when_mapped_method_is_static" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ExpressionBasedDomainEventHandlerMappingStrategyTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ExpressionBasedDomainEventHandlerMappingStrategyTests.It_should_create_the_correct_event_handlers" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ExpressionBasedDomainEventHandlerMappingStrategyTests.It_should_handle_event_when_there_is_no_exact_match_and_event_types_are_derived" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ExpressionBasedDomainEventHandlerMappingStrategyTests.It_should_map_the_mapped_events" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ExpressionBasedDomainEventHandlerMappingStrategyTests.It_should_not_handle_event_when_there_is_a_mapping_inheritance_type_mismatch" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ExpressionBasedDomainEventHandlerMappingStrategyTests.It_should_not_handle_event_when_there_needs_to_be_an_exact_match_and_event_types_are_derived" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.ExpressionBasedDomainEventHandlerMappingStrategyTests.It_should_throw_an_exception_when_mapped_method_is_static" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="InvalidEventHandlerMappingExceptionTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.InvalidEventHandlerMappingExceptionTests.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.InvalidEventHandlerMappingExceptionTests.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Sourcing.Mapping.InvalidEventHandlerMappingExceptionTests.It_should_be_serializable" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Storage" executed="True" result="Success" success="True" time="1.292" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AttributeEventTypeResolverTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Aliases_do_not_count_as_a_name" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Does_not_error_when_adding_event_twice" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Does_not_use_alias_when_resolving_event_name" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Resolves_alias_to_type" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Resolves_event_names_to_types" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Resolves_types_to_event_names" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Throws_if_adding_aliases_that_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Throws_if_adding_events_with_same_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Throws_if_event_does_not_have_a_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.AttributeEventTypeResolverTests.Throws_if_event_name_is_empty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ConcurrencyExceptionSpecs" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Eventing.Storage.ConcurrencyExceptionSpecs.BaseExceptionTests`1.It_should_be_serializable" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.ConcurrencyExceptionSpecs.Constructing_it_should_initialize_the_right_members" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DuplicateCommitExceptionTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Eventing.Storage.DuplicateCommitExceptionTests.BaseExceptionTests`1.It_should_be_serializable" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InMemoryEventStoreSpecs" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Eventing.Storage.InMemoryEventStoreSpecs.When_getting_all_event_from_a_non_existing_event_source_the_result_should_be_empty" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.InMemoryEventStoreSpecs.When_getting_all_event_from_an_existing_event_source_the_result_should_be_all_events_stored_for_that_event_source" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyBagConverterTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Eventing.Storage.PropertyBagConverterTests.Restoration_of_an_event_from_a_property_bag_containing_nulls_should_not_fail" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyBagTests" executed="True" result="Success" success="True" time="0.026" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Eventing.Storage.PropertyBagTests.Adding_the_same_property_twice_should_cause_exception" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.PropertyBagTests.An_new_instance_should_not_contain_any_properties" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.PropertyBagTests.Calling_AddPropertyValue_should_add_the_property_info" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.PropertyBagTests.Creating_a_bag_should_not_throw_exception" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.PropertyBagTests.EventName_information_should_match_initialized_name" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.PropertyBagTests.The_number_of_properties_should_be_equal_to_the_number_of_calls_to_AddPropertyValue" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Serialization" executed="True" result="Success" success="True" time="0.078" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="EventConverterTests" executed="True" result="Success" success="True" time="0.045" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.AddConverter_ByName" executed="True" result="Success" success="True" time="0.028" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.AddConverter_ByName_converter_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.AddConverter_ByName_eventName_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.AddConverter_ByType" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.AddConverter_ByType_converter_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.AddConverter_ByType_eventType_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.AddConverter_duplicate_name" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.Ctor" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.Ctor_typeResolver_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.Upgrade" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.Upgrade_theEvent_null" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.EventConverterTests.Upgrade_unknown_event" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="JsonEventFormatterTests" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.JsonEventFormatterTests.Ctor" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.JsonEventFormatterTests.Ctor_typeResolver_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.JsonEventFormatterTests.Deserialize" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.JsonEventFormatterTests.Serialize" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="StringEventTranslatorTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.StringEventTranslatorTests.Dates_respect_timezone" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.StringEventTranslatorTests.Dates_use_iso_format" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.StringEventTranslatorTests.TranslateToCommon" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.StringEventTranslatorTests.TranslateToCommon_obj_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.StringEventTranslatorTests.TranslateToRaw" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Ncqrs.Tests.Eventing.Storage.Serialization.StringEventTranslatorTests.TranslateToRaw_obj_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SimpleEventTypeResolverTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Ncqrs.Tests.Eventing.Storage.SimpleEventTypeResolverTests.Resolves_event_names_to_types" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Ncqrs.Tests.Eventing.Storage.SimpleEventTypeResolverTests.Resolves_types_to_event_names" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SQL" executed="True" result="Inconclusive" success="False" time="1.141" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MsSqlServerEventStoreTests" executed="True" result="Inconclusive" success="False" time="1.141" asserts="0">
                            <categories>
                              <category name="Integration" />
                            </categories>
                            <results>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.SQL.MsSqlServerEventStoreTests.Retrieving_table_creation_queries_should_return_dll" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[SetUp : No connection could be made with SQL server: Cannot truncate table 'Events' because it is being referenced by a FOREIGN KEY constraint.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.SQL.MsSqlServerEventStoreTests.Saving_snapshot_should_not_throw_an_exception_when_snapshot_is_valid" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[SetUp : No connection could be made with SQL server: Cannot truncate table 'Events' because it is being referenced by a FOREIGN KEY constraint.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.SQL.MsSqlServerEventStoreTests.Saving_with_concurrent_event_adds_should_not_be_causing_deadlocks" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[SetUp : No connection could be made with SQL server: Cannot truncate table 'Events' because it is being referenced by a FOREIGN KEY constraint.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.SQL.MsSqlServerEventStoreTests.Saving_with_concurrent_event_edits_should_be_subject_to_concurrency_checks" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[SetUp : No connection could be made with SQL server: Cannot truncate table 'Events' because it is being referenced by a FOREIGN KEY constraint.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.SQL.MsSqlServerEventStoreTests.Storing_empty_event_stream_should_not_throw" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[SetUp : No connection could be made with SQL server: Cannot truncate table 'Events' because it is being referenced by a FOREIGN KEY constraint.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.SQL.MsSqlServerEventStoreTests.Storing_entity_sourced_event_should_preserve_entity_id" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[SetUp : No connection could be made with SQL server: Cannot truncate table 'Events' because it is being referenced by a FOREIGN KEY constraint.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Ncqrs.Tests.Eventing.Storage.SQL.MsSqlServerEventStoreTests.Storing_event_source_should_succeed" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[SetUp : No connection could be made with SQL server: Cannot truncate table 'Events' because it is being referenced by a FOREIGN KEY constraint.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UncommittedEventStreamTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="Ncqrs.Tests.Eventing.UncommittedEventStreamTests.When_contains_multpile_events_from_different_sources_should_indicate_non_single_source" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Ncqrs.Tests.Eventing.UncommittedEventStreamTests.When_contains_multpile_events_from_same_source_should_indicate_a_single_source" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Ncqrs.Tests.Eventing.UncommittedEventStreamTests.When_contains_single_event_should_indicate_a_single_source" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Ncqrs.Tests.Eventing.UncommittedEventStreamTests.When_empty_should_indicate_a_single_source" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="GuidCombGeneratorTests" executed="True" result="Success" success="True" time="1.298" asserts="0">
                <results>
                  <test-case name="Ncqrs.Tests.GuidCombGeneratorTests.Calling_generate_multiple_times_should_return_unique_results" executed="True" result="Success" success="True" time="1.297" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="InternalExtensionsTests" executed="True" result="Success" success="True" time="0.026" asserts="0">
                <results>
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Clone_should_return_list_with_same_values" executed="True" result="Success" success="True" time="0.009" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Clone_should_return_other_instance" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Clone_should_throw_ArgumentNullException_when_source_is_null" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_generic_should_return_false_when_source_does_not_implement_the_interface" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_generic_should_return_true_when_source_does_implement_the_interface" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_generic_should_throw_when_interfaceType_is_not_an_interface_type" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_should_return_false_when_source_does_not_implement_the_interface" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_should_return_true_when_source_does_implement_the_interface" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_should_throw_when_interfaceType_is_not_an_interface_type" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_should_throw_when_interfaceType_is_null" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.Implements_should_throw_when_source_is_null" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsEmpty_should_return_false_on_non_empty_array" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsEmpty_should_return_false_on_non_empty_list" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsEmpty_should_return_true_on_empty_array" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsEmpty_should_return_true_on_empty_list" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsEmpty_should_throw_ArgumentNullException_on_null_reference" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsNullOrEmpty_should_return_false_on_string_with_text" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsNullOrEmpty_should_return_true_on_empty" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.InternalExtensionsTests.IsNullOrEmpty_should_return_true_on_null" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NcqrsEnvironmentConfigurationExceptionSpecs" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <results>
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentConfigurationExceptionSpecs.Constructing_an_instance_should_initialize_the_inner_exception" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentConfigurationExceptionSpecs.Constructing_an_instance_should_initialize_the_message" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentConfigurationExceptionSpecs.It_should_be_serializable" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NcqrsEnvironmentSpecs" executed="True" result="Success" success="True" time="0.078" asserts="0">
                <results>
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.Configured_instance_should_over_rule_default" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.Removing_a_default_while_there_is_no_default_registered_should_not_throw_an_exception" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.Setting_a_default_should_multiple_times_should_not_throw_an_exception" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.Setting_a_default_should_override_the_exiting_default" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.When_get_is_called_but_the_source_did_not_return_an_intance_an_exception_should_be_thrown" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.When_get_is_called_the_call_should_be_redirected_to_the_configuration" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.When_get_is_called_the_call_should_return_what_the_environment_configuration_returned" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                  <test-case name="Ncqrs.Tests.NcqrsEnvironmentSpecs.When_get_is_called_when_the_environmemt_is_not_configured_defaults_should_still_be_returned" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>